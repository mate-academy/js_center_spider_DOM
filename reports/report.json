{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 0,
    "pending": 0,
    "failures": 2,
    "start": "2023-09-10T13:55:38.244Z",
    "end": "2023-09-10T13:55:47.205Z",
    "duration": 8851,
    "testsRegistered": 2,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "800d99d8-6e13-499f-b75d-a1b4d04bfe37",
      "title": "",
      "fullFile": "cypress\\integration\\centerSpider.spec.js",
      "file": "cypress\\integration\\centerSpider.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d8bdb76c-78f6-43a7-a613-4ccd22ecdcbb",
          "title": "Spider application",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should center the spider by left border",
              "fullTitle": "Spider application should center the spider by left border",
              "timedOut": null,
              "duration": 3307,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('.wall').then(function ($wall) {\n  cy.get('.spider').should(function ($spider) {\n    var spiderLeft = $spider.offset().left;\n    var expectedLeft = $wall.innerWidth() / 2 + ($wall.offset().left + 10) - $spider.width() / 2;\n    expect(spiderLeft).to.equal(expectedLeft);\n  });\n});",
              "err": {
                "message": "ReferenceError: The following error originated from your application code, not from Cypress.\n\n  > sp is not defined\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                "estack": "ReferenceError: The following error originated from your application code, not from Cypress.\n\n  > sp is not defined\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application\n    at Object.parcelRequire.scripts/main.js (http://localhost:8080/main.d8ebb8d6.js:126:1)\n    at newRequire (http://localhost:8080/main.d8ebb8d6.js:47:24)\n    at http://localhost:8080/main.d8ebb8d6.js:81:7\n    at http://localhost:8080/main.d8ebb8d6.js:120:3",
                "diff": null
              },
              "uuid": "a8bd8dcf-6c6b-4eab-8b35-8deaa0863128",
              "parentUUID": "d8bdb76c-78f6-43a7-a613-4ccd22ecdcbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should center the spider by top border",
              "fullTitle": "Spider application should center the spider by top border",
              "timedOut": null,
              "duration": 5544,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('.wall').then(function ($wall) {\n  cy.get('.spider').should(function ($spider) {\n    var spiderTop = $spider.offset().top;\n    var expectedTopAbs = $wall.innerHeight() / 2 + ($wall.offset().top + 10) - $spider.height() / 2;\n    expect(spiderTop).to.equal(expectedTopAbs);\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying: expected 960 to equal -15",
                "estack": "AssertionError: Timed out retrying: expected 960 to equal -15\n    at Context.eval (http://localhost:8080/__cypress/tests?p=cypress\\integration\\centerSpider.spec.js:117:30)",
                "diff": "- 960\n+ -15\n"
              },
              "uuid": "f825c5d9-5b49-421c-942c-e1487711bd5a",
              "parentUUID": "d8bdb76c-78f6-43a7-a613-4ccd22ecdcbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a8bd8dcf-6c6b-4eab-8b35-8deaa0863128",
            "f825c5d9-5b49-421c-942c-e1487711bd5a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8851,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "reportDir": "raw_reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.1.0"
    }
  }
}